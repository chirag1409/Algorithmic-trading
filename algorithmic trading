# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kDmLgGcp7NiBrlOF3I1MwZxdMXukKfcx

Import Libraries
"""

url = 'https://launchpad.net/~mario-mariomedina/+archive/ubuntu/talib/+files'
ext = '0.4.0-oneiric1_amd64.deb -qO'
!wget $url/libta-lib0_$ext libta.deb
!wget $url/ta-lib0-dev_$ext ta.deb
!dpkg -i libta.deb ta.deb
!pip install ta-lib
import talib
!pip install jugaad-data

!pip install yfinance
!pip install yahoofinancials

import statsmodels.api as sm
import matplotlib.pyplot as plt
import datetime
from jugaad_data.nse import bhavcopy_save, bhavcopy_fo_save
from jugaad_data.nse import stock_df
from jugaad_data.nse import NSELive
import numpy as np
import sqlite3
import pandas as pd
import sys
from collections import deque
# from google.colab import drive
# drive.mount('/content/drive/', force_remount=True)
from datetime import date
from collections import deque
import yfinance as yf
from yahoofinancials import YahooFinancials

"""Conversion of string to date"""

def conv_strtodate(date_str):
  return datetime.strptime(date_str, '%d/%m/%y')

"""Fetch Data"""

def fetchlive(symbol):
  n = NSELive()
  q = n.stock_quote(symbol)
  return q

def fetchprev(symbol,from_date=date(2020,1,1),to_date=date(2023,3,19),series="EQ"):
  # from_date = conv_strtodate(from_date)
  # to_date = conv_strtodate(to_date)
  df = stock_df(symbol=symbol, from_date=from_date,to_date=to_date,series=series)
  return df

"""Technical Parameters"""

def RSI(df,timeperiod=14):
  df['RSI']=talib.RSI(df["CLOSE"], timeperiod)

def MACD(DF,a,b,c):
  df = DF.copy()
  df["MA_FAST"]=df["CLOSE"].ewm(span=a,min_periods=a).mean()
  df["MA_SLOW"]=df["CLOSE"].ewm(span=b,min_periods=b).mean()
  df["MACD"]=df["MA_FAST"]-df["MA_SLOW"]
  df["SIGNAL"]=df["MACD"].ewm(span=c,min_periods=c).mean()
  df.dropna(inplace=True)
  return df

def ADX(df,timeperiod = 14):
  df['ADX'] = talib.ADX(df['HIGH'],df['LOW'], df['CLOSE'], timeperiod=timeperiod)

def ATR(df,time = 14):
  df['ATR'] = talib.ATR(df["HIGH"], df["LOW"], df["CLOSE"], timeperiod=time)

def SUPERTREND(df,n=7,m=2):
    """function to calculate Supertrend given historical candle data
        n = n day ATR - usually 7 day ATR is used
        m = multiplier - usually 2 or 3 is used"""
    # df = DF.copy()
    df['ATR'] = ATR(df,n)
    df["B-U"]=((df['HIGH']+df['LOW'])/2) + m*df['ATR']
    df["B-L"]=((df['HIGH']+df['LOW'])/2) - m*df['ATR']
    df["U-B"]=df["B-U"]
    df["L-B"]=df["B-L"]
    ind = df.index
    for i in range(n,len(df)):
        if df['CLOSE'][i-1]<=df['U-B'][i-1]:
            df.loc[ind[i],'U-B']=min(df['B-U'][i],df['U-B'][i-1])
        else:
            df.loc[ind[i],'U-B']=df['B-U'][i]
    for i in range(n,len(df)):
        if df['CLOSE'][i-1]>=df['L-B'][i-1]:
            df.loc[ind[i],'L-B']=max(df['B-L'][i],df['L-B'][i-1])
        else:
            df.loc[ind[i],'L-B']=df['B-L'][i]
    df['STREND']=np.nan
    for test in range(n,len(df)):
        if df['CLOSE'][test-1]<=df['U-B'][test-1] and df['CLOSE'][test]>df['U-B'][test]:
            df.loc[ind[test],'STREND']=df['L-B'][test]
            break
        if df['CLOSE'][test-1]>=df['L-B'][test-1] and df['CLOSE'][test]<df['L-B'][test]:
            df.loc[ind[test],'STREND']=df['U-B'][test]
            break
    for i in range(test+1,len(df)):
        if df['STREND'][i-1]==df['U-B'][i-1] and df['CLOSE'][i]<=df['U-B'][i]:
            df.loc[ind[i],'STREND']=df['U-B'][i]
        elif  df['STREND'][i-1]==df['U-B'][i-1] and df['CLOSE'][i]>=df['U-B'][i]:
            df.loc[ind[i],'STREND']=df['L-B'][i]
        elif df['STREND'][i-1]==df['L-B'][i-1] and df['CLOSE'][i]>=df['L-B'][i]:
            df.loc[ind[i],'STREND']=df['L-B'][i]
        elif df['STREND'][i-1]==df['L-B'][i-1] and df['CLOSE'][i]<=df['L-B'][i]:
            df.loc[ind[i],'STREND']=df['U-B'][i]
    # df["STREND"] = df['Strend']
    return df['STREND']

def BOLLINGERBAND(df):
  df["UPPERBAND"], df["MIDDLEBAND"], df["LOWERBAND"] = talib.BBANDS(df["CLOSE"], timeperiod=5, nbdevup=2, nbdevdn=2, matype=0)

def LEVELS(df):
    """returns pivot point and support/resistance levels"""
    high = round(df["HIGH"],2)
    low = round(df["LOW"],2)
    close = round(df["CLOSE"],2)
    pivot = round((high + low + close)/3,2)
    df["r1"] = round((2*pivot - low),2)
    df["r2"] = round((pivot + (high - low)),2)
    df["r3"] = round((high + 2*(pivot - low)),2)
    df["s1"] = round((2*pivot - high),2)
    df['s2'] = round((pivot - (high - low)),2)
    df['s3'] = round((low - 2*(high - pivot)),2)

def SLOPE(ohlc_df,n):
    "function to calculate the slope of regression line for n consecutive points on a plot"
    temp = ohlc_df.iloc[-1*n:,:]
    y = ((temp["OPEN"] + temp["CLOSE"])/2).values
    x = np.array(range(n))
    y_scaled = (y - y.min())/(y.max() - y.min())
    x_scaled = (x - x.min())/(x.max() - x.min())
    x_scaled = sm.add_constant(x_scaled)
    model = sm.OLS(y_scaled,x_scaled)
    results = model.fit()
    slope = np.rad2deg(np.arctan(results.params[-1]))
    return slope

"""CANDLES"""

def DOJI(df):
    """returns dataframe with doji candle column"""
    # t1 = ohlc_df.copy()
    avg_candle_size = abs(df["CLOSE"] - df["OPEN"]).median()
    df["DOJI"] = abs(df["CLOSE"] - df["OPEN"]) <=  (0.05 * avg_candle_size)

def HAMMER(df):
    """returns dataframe with hammer candle column"""
    # df = ohlc_df.copy()
    df["hammer"] = (((df["HIGH"] - df["LOW"])>3*(df["OPEN"] - df["CLOSE"])) & \
                   ((df["CLOSE"] - df["LOW"])/(.001 + df["HIGH"] - df["LOW"]) > 0.6) & \
                   ((df["OPEN"] - df["LOW"])/(.001 + df["HIGH"] - df["LOW"]) > 0.6)) & \
                   (abs(df["CLOSE"] - df["OPEN"]) > 0.1* (df["HIGH"] - df["LOW"]))

def hammer_fiboretrace(df):
#   high = df['HIGH']
#   low = df['LOW']
#   diff = high - low
#   fib_38 = high - (diff * 0.382)

# # Calculate the hammer candlestick pattern
#   df['body'] = abs(df['OPEN'] - df['CLOSE'])
#   df['upper_shadow'] = df['HIGH'] - df[['OPEN', 'CLOSE']]
#   df['lower_shadow'] = df[['OPEN', 'CLOSE']].min(axis=1) - df['LOW']
#   df['is_hammer'] = ((df['body'] < 0.3 * df['body'].rolling(5).mean()) & (df['lower_shadow'] > 2 * df['body']) & (df['upper_shadow'] < 0.1 * df['body']))
#   temp =[0]
#   for i in range(1,len(df)):
# # Determine if the hammer candlestick pattern is present at the 38.2 Fibonacci retracement level
#     if df['is_hammer'][i-1] and df['LOW'][i-1] <= fib_38 <= df['HIGH'][i-1]:
#       temp.append(1)
#     else:
#       temp.append(0)
#   df['hammer_fiboretrace'] = temp
  prev = 0
  temp = [0,0,0,0,0]
  flag = 0
  queue = deque()
  sum = 0
  for i in range (5):
    queue.append(abs(df.loc[i,"OPEN"]-df.loc[i,"CLOSE"]))
    sum += abs(df.loc[i,"OPEN"]-df.loc[i,"CLOSE"])
  for i in range(5,len(df)):
    high = df.loc[i,'HIGH']
    low = df.loc[i,"LOW"]
    diff = high - low
    fib_38 = high - (diff * 0.382)
    body = abs(df.loc[i,"OPEN"]-df.loc[i,"CLOSE"])
    upper_shadow = abs(df.loc[i,"HIGH"]-max(df.loc[i,"OPEN"],df.loc[i,"CLOSE"]))
    lower_shadow = abs(df.loc[i,"LOW"] - min(df.loc[i,"OPEN"],df.loc[i,"CLOSE"]))
    is_hammer = ((body < 0.3 * sum/5) & (lower_shadow > 2 * body) & (upper_shadow < 0.1 * body))
    # queue.popleft()
    queue.append(body)
    sum -= queue.popleft()
    sum += body
    if prev and df.loc[i-1,"LOW"] <= fib_38 <= df.loc[i-1,"HIGH"]:
      # print(i)
      temp.append(1)
    else:
      # print(i)
      temp.append(0)
    prev = is_hammer
  df['hammer_fiboretrace'] = temp

def isw(df):
  # //2 means high
  temp=[]
  flag = 0
  for i in range (len(df)):
    body = df.loc[i,"CLOSE"] - df.loc[i,"OPEN"]
    height = df.loc[i,"HIGH"] - df.loc[i,"LOW"]
    if body<0 and height*0.5<body :
      temp.append(-2)
    elif body >0 and height*0.5<body:
      temp.append(2)
    else:
      temp.append(0)

    # if (df.loc[i,"CLOSE"]<df.loc[i,"OPEN"]):
    #   temp.append(-1)
    # else:
    #   temp.append(1)
  df["isw"]= temp

"""TREND"""

def BEARISH(df):
  temp = [False]
  BOLLINGERBAND(df)
  DOJI(df)
  for i in range(1,len(df)):
    if (df.loc[i-1,"DOJI"] == True):
      if (df.loc[i,"CLOSE"]>df.loc[i,"UPPERBAND"]):
        temp.append(True)
      else:
        temp.append(False)
    else:
      temp.append(False)
  df["BEARISH"] = temp

def TREND(df,n):
    temp = 0
    hm,dm = [0],[0]
    for i in range(1,len(df)):
      if df.loc[i, "LOW"]>=df.loc[i-1, "LOW"]:
        hm.append(1)
      else:
        hm.append(0)
      if(df.loc[i, "HIGH"]<=df.loc[i-1, "HIGH"]):
        dm.append(1)
      else:
        dm.append(0)
    while(len(hm)!= len(df)):
      hm.appendleft(0)
    while(len(dm)!= len(df)):
      dm.appendleft(0)
    df["UP"] = hm
    df["DN"] = dm
    km =[]
    for i in range(n):
      km.append("None")
    for i in range(n,len(df)):
      if df.loc[i, "CLOSE"] > df.loc[i-1, "OPEN"]:
        for j in range(i,i-n,-1):
          temp += df.loc[j, "UP"]
        if temp>=0.7*n:
          km.append("Up")
        else:
          km.append("None")
      elif df.loc[i-1, "OPEN"]  > df.loc[i-1, "CLOSE"] :
        temp=0
        for j in range(i,i-n,-1):
          temp += df.loc[j, "DN"]
        if temp>=0.7*n:
          km.append("Down")
        else:
          km.append("None")
      else:
          km.append("None")
    df["TREND"]= km

"""BUY,SELL"""

# def trend_1(df):
#   profit = 0
#   capital = 0
#   ATR(df)
#   for i in range (4,len(df)-3):
#   # i = 4
#   # while(i<len(df)-3):
#     if (df.loc[i,"hammer"]==True):
#       # targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
#       # stoploss =  df.loc[i,"CLOSE"] - df.loc[i,"ATR"]
#       if df.loc[i-1,"TREND"] == "Down":
#         flag = 0
#         for k in range (2):
#           if df.loc[i+k+1,"CLOSE"] < df.loc[i+k+1,"OPEN"]:
#             flag = 1
#         i+=k
#         if flag == 0:
#           print(["BUY",df.loc[i,"DATE"],df.loc[i,"OPEN"]])
#           targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
#           stoploss =  df.loc[i,"CLOSE"] - df.loc[i,"ATR"]
#           capital += df.loc[i+3,"OPEN"]*100
#           buy_price = df.loc[i+3,"OPEN"]
#           j=1
#           while(i+j<len(df) and df.loc[i,"BEARISH"] != True and df.loc[i+j,"LOW"]<stoploss and df.loc[i+j,"HIGH"]>targetprice):
#             j+=1
#           if df.loc[i+j,"LOW"]<stoploss:
#             profit += 100*(stoploss-buy_price)
#             print(["SELL",df.loc[i+j,"DATE"],stoploss])
#           elif df.loc[i+j,"HIGH"]>targetprice:
#             profit += 100*(targetprice-buy_price)
#             print(["SELL",df.loc[i+j,"DATE"],targetprice])
#           elif (i+j<len(df)):
#             profit += 100*(df.loc[i+j,"OPEN"]-buy_price)
#             print(["SELL",df.loc[i+j,"DATE"],df.loc[i,"OPEN"]])
#           else:
#             profit += 100*(df.loc[i+j-1,"OPEN"]-buy_price)
#             print(["SELL",df.loc[i+j-1,"DATE"],df.loc[i,"OPEN"]])
#           i+=j
#           # if (i<len(df)):

#           # else:
#           #   print(["SELL",df.loc[i-1,"DATE"],df.loc[i-1,"OPEN"]])
#     # i+=1
#   print([capital,profit])

def BUY(df,price,quantity,capital,holdings,i,targetprice,stoploss):
  capital += price*quantity
  holdings.append([price,quantity,targetprice,stoploss])
  print(df[i-4:i])
  print(["BUY",df.loc[i,"CLOSE"],df.loc[i,"DATE"]])
  # print(holdings)
  return [holdings,capital]

def SELL(price,arr,i,capital,profit,df,date):
  # print([price,arr[i][0]])
  profit += arr[i][1]*(price-arr[i][0])
  arr.pop(i)
  # print(profit)
  print(["SELL",price,df.loc[date,"DATE"]])
  return [arr,capital,profit]

def CHECK(holdings,i,df,capital,profit):
  l=0
  while(l<len(holdings)):
      if holdings[l][2]<df.loc[i,"HIGH"]:
        holdings,capital,profit = SELL(holdings[l][2],holdings,l,capital,profit,df,i)
        print([holdings,df.loc[i,"DATE"]])
        l-=1
      elif holdings[l][3] >df.loc[i,"LOW"]:
        holdings,capital,profit = SELL(holdings[l][3],holdings,l,capital,profit,df,i)
        print([holdings,df.loc[i,"DATE"]])
        l-=1
      l+=1
  return [holdings,capital,profit]

"""TRENDS"""

def cl(df):
  profit,capital ,i,holdings= 0 , 0 , 1,[]
  print(df.loc[0,"SYMBOL"])
  while(i<len(df)):
    if df.loc[i,"hammer"] == True:
      if df.loc[i-1,"TREND"] == "Down":
        flag,k = 0 , 0
        while(k<2):
          if df.loc[i+k+1,"CLOSE"] < df.loc[i+k+1,"OPEN"]:
            flag = 1
            break
          k+=1
          i+=1
        if flag == 0:
          targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
          stoploss =  df.loc[i,"CLOSE"] - df.loc[i,"ATR"]*4
          holdings,capital = BUY(df,df.loc[i,"CLOSE"],100,capital,holdings,i,targetprice,stoploss)
          # print([holdings,df.loc[i,"DATE"]])
    holdings,capital,profit=CHECK(holdings,i,df,capital,profit)
    if df.loc[i,"BEARISH"] == True:
      while(len(holdings)!=0):
        holdings,capital,profit = SELL(df.loc[i,"CLOSE"],holdings,0,capital,profit)
        # print([holdings,df.loc[i,"DATE"]])
    i+=1
  print([capital,profit])

def threewhitesoldiers(df):
  profit,capital,i,holdings = 0,0,1,[]
  print(df.loc[i,"SYMBOL"])
  flag = 0
  while(i<len(df)):
    t=0
    flag=0
    if(df.loc[i-1,"TREND"] == "Down" and df.loc[i,"CLOSE"]>df.loc[i,"OPEN"]):
      i+=1
      if i <len(df) and df.loc[i,"CLOSE"]>df.loc[i,"OPEN"] and (df.loc[i-1,"OPEN"]+df.loc[i-1,"CLOSE"])/2<=df.loc[i,"OPEN"]<=df.loc[i-1,"CLOSE"] and df.loc[i,"HIGH"]>df.loc[i-1,"HIGH"]:
        flag = 1
      else:
        break
      i+=1
      if flag == 1 and i <len(df) and df.loc[i,"CLOSE"]>df.loc[i,"OPEN"] and (df.loc[i-1,"OPEN"]+df.loc[i-1,"CLOSE"])/2<=df.loc[i,"OPEN"]<=df.loc[i-1,"CLOSE"] and df.loc[i,"VOLUME"]>df.loc[i-2,"VOLUME"] and df.loc[i,"HIGH"]>df.loc[i-1,"HIGH"]:
        if (df.loc[i,"HIGH"]>df.loc[i-1,"HIGH"]):
          continue
        else:
          break
      else:
        break
      i+=1
      if i<len(df):
        if df.loc[i,"CLOSE"]>df.loc[i-1,"HIGH"]:
          if df.loc[i,"OPEN"]>df.loc[i-1,"CLOSE"]:
            targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
            stoploss =  df.loc[i-1,"LOW"]
          else:
            targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
            stoploss =  df.loc[i-3,"LOW"]
        else:
          t=1
        i+=1
        if (t!=1):
          holdings,capital = BUY(df,df.loc[i,"OPEN"],100,capital,holdings,i,targetprice,stoploss)
        if df.loc[i,"BEARISH"] == True:
          while(len(holdings)!=0):
            holdings,capital,profit = SELL(df.loc[i,"CLOSE"],holdings,0,capital,profit,df,i)
    if i<len(df):
      holdings,capital,profit=CHECK(holdings,i,df,capital,profit)
    i+=1
  print([capital,profit])
  # for i in range(3,len(df)):
  #   pattern = talib.CDL3WHITESOLDIERS(df["OPEN"][:i],df["HIGH"][:i],df["LOW"][:i],df["CLOSE"][:i])
  #   if pattern[len(pattern)-2] == 100:
  #     if df.loc[i,"CLOSE"]>df.loc[i-1,"CLOSE"]:
  #       if df.loc[i,"OPEN"]>df.loc[i-1,"CLOSE"]:
  #         targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
  #         stoploss =  df.loc[i-1,"LOW"]
  #       else:
  #         targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
  #         stoploss =  df.loc[i-3,"LOW"]
  #     else:
  #       t=1
  #     # i+=1
  #     if (t!=1):
  #       holdings,capital = BUY(df,df.loc[i,"OPEN"],100,capital,holdings,i,targetprice,stoploss)
  #     CHECK(holdings,i,df,capital,profit)
  #   print([capital,profit])

def Hammer_Trend(df):
  profit,capital ,i,holdings= 0 , 0 , 1,[]
  print(df.loc[0,"SYMBOL"])
  while(i<len(df)):
    if (df.loc[i,"TREND"] == "Down" and df.loc[i,"hammer"] == True):
      k,flag = 0,0
      while(i<len(df) and k<2 and flag == 0):
        i+=1
        if (df.loc[i,"CLOSE"] < df.loc[i,"OPEN"]):
          flag = 1
          break
        k+=1
      if flag == 0:
        i+=1
        if i<len(df):
          targetprice = df.loc[i,"CLOSE"] + df.loc[i,"ATR"]*4
          stoploss =  df.loc[i,"CLOSE"] - df.loc[i,"ATR"]*4
          holdings,capital=BUY(df,df.loc[i,"CLOSE"],100,capital,holdings,i,targetprice,stoploss)
    l = 0
    while(l<len(holdings)):
      if holdings[l][2]<df.loc[i,"HIGH"]:
        holdings,capital,profit = SELL(holdings[l][2],holdings,l,capital,profit)
        print([holdings,df.loc[i,"DATE"]])
        l-=1
      elif holdings[l][3] >df.loc[i,"LOW"]:
        holdings,capital,profit = SELL(holdings[l][3],holdings,l,capital,profit)
        print([holdings,df.loc[i,"DATE"]])
        l-=1
      l+=1
    if df.loc[i,"BEARISH"] == True:
      while(len(holdings)!=0):
        holdings,capital,profit = SELL(df.loc[i,"CLOSE"],holdings,0,capital,profit)
        print([holdings,df.loc[i,"DATE"]])
    i+=1
  print([capital,profit])

def TREND_MA(df):
   df['MA20'] = df['CLOSE'].rolling(window=20).mean()
   df['MA50'] = df['CLOSE'].rolling(window=50).mean()
   df['TREND'] = np.where(df['MA20'] > df['MA50'], 'Up', 'Down')

"""CALCULATIONS"""

def calc(df):
  TREND(df,10)
  HAMMER(df)
  isw (df)
  ATR(df)
  BEARISH(df)
  # Hammer_Trend(df)
  threewhitesoldiers(df)

"""MAIN"""

def main():
  arr = ['ADANIENT','YESBANK','FRETAIL','AMBUJACEM','ADANIPORTS']
  # arr=['ADANIENT']
  prices = {}
  for i in arr:
    if i not in prices:
      prices[i] = fetchprev(i)[::-1].reset_index(drop=True)
  for i in prices:
    df = prices[i]
    calc(df)

main()



